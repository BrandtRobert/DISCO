import java.awt.AWTException;
import java.awt.Color;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.PointerInfo;
import java.awt.Robot;
import java.awt.event.InputEvent;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.TimerTask;

import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Ramadan
 */
public class AdminMain extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public AdminMain() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
 public void initComponents() {
    	
    	
    	  	
    	 try {
             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                 if ("Nimbus".equals(info.getName())) {
                     javax.swing.UIManager.setLookAndFeel(info.getClassName());
                     break;
                 }
             }
         } catch (ClassNotFoundException ex) {
             java.util.logging.Logger.getLogger(AdminMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (InstantiationException ex) {
             java.util.logging.Logger.getLogger(AdminMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (IllegalAccessException ex) {
             java.util.logging.Logger.getLogger(AdminMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
             java.util.logging.Logger.getLogger(AdminMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         }
    	 
    	
    	// read scenarios from list.txt file
    	 
        scenarioButton = new javax.swing.JButton();
        scenarioLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        scenarioList = new javax.swing.JList();
        startButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Main Menu");
        setName("mainFrame"); // NOI18N
        setResizable(false);

        scenarioButton.setText("New Targets/Units Scenario");
        scenarioButton.setActionCommand("New Scanario");
        scenarioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scenarioButtonActionPerformed(evt);
            }
        });

        scenarioLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        scenarioLabel.setForeground(java.awt.Color.blue);
        scenarioLabel.setText("Use Existing Scenario: ");

        
        readListFile();
        
        /*scenarioList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });*/
        scenarioList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scenarioListMouseClicked(evt);
            }
        });
        scenarioList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                scenarioListKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(scenarioList);
        scenarioList.getAccessibleContext().setAccessibleParent(null);

        startButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        startButton.setForeground(java.awt.Color.blue);
        startButton.setText("Start Game");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        
       
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(startButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(scenarioLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(scenarioButton)))
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(scenarioButton)
                .addGap(18, 18, 18)
                .addComponent(scenarioLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(startButton)
                .addGap(15, 15, 15))
        );

        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }// </editor-fold>//GEN-END:initComponents

    private void scenarioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scenarioButtonActionPerformed
                    
          new Scenario(this);
          //this.dispose();
          
    }//GEN-LAST:event_scenarioButtonActionPerformed

    private void scenarioListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scenarioListMouseClicked
        //System.out.println("Item " + scenarioList.getSelectedIndex());
        // TODO add your handling code here:
    }//GEN-LAST:event_scenarioListMouseClicked

    private void scenarioListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_scenarioListKeyPressed
        //System.out.println("Item" + scenarioList.getSelectedIndex());
        
    }//GEN-LAST:event_scenarioListKeyPressed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
    	
    	
    	
    	if (scenarioList.getSelectedIndex() == -1){
    		
    		JOptionPane.showMessageDialog(null,
     	            "Select A Scenario!",
     	            "Input Error", JOptionPane.ERROR_MESSAGE);
    		
    	} else {
    		Load load = new Load(scenarioPath + scenarioNmaes[scenarioList.getSelectedIndex()]+".xml","","");
    		hideOrShowControls();
    		load.playSTop_clicked();
    		
    		scenarioName = scenarioNmaes[scenarioList.getSelectedIndex()]+".xml";
    		Sea.scenarioName = scenarioName;
    		
    		int seconds = Integer.parseInt(ConfigProps.DISCO_TIMER);
            seconds=seconds-1;
            String timertype = ConfigProps.DISCO_TIMER_TYPE;
            String displaytype = ConfigProps.DISCO_TIMER_DISPLAY;
            if(timertype.equals("UPWARDS")){
            	
            	if(displaytype.equals("MINUTES"))
            	startUpTimerMinutes(seconds);
            	else
            	startUpTimerSeconds(seconds);
            }else if(timertype.equals("DOWNWARDS")){
            	
            	if(displaytype.equals("MINUTES"))
            	startDownTimerMinutes(seconds);
            	else
            	startDownTimerSeconds(seconds);
            }
            
            
    	   	this.dispose();
    	}
    	
    }//GEN-LAST:event_startButtonActionPerformed
    
    
    

    private void hideOrShowControls() {

    	if(ConfigProps.LAUNCH_UNIT.equals("N")){
    		Load.launchUnitButton.setVisible(false);
    		Load.inActiveUnitsComboBox.setVisible(false);
    		Load.launchUnitLabel.setVisible(false);
    	}else if(ConfigProps.LAUNCH_UNIT.equals("G")){
    		Load.launchUnitButton.setEnabled(false);
    		Load.launchUnitButton.setToolTipText("Launching of units has been disabled for the current scenario");
    	}
    	
    	if(ConfigProps.BRIEFING.equals("N")){
    		Load.briefingButton.setVisible(false);
    	}else if(ConfigProps.BRIEFING.equals("G")){
    		Load.briefingButton.setEnabled(false);
    		Load.briefingButton.setToolTipText("Briefing feature has been disabled for the current scenario");
    		Load.briefingButton.setBackground(Color.GRAY);
    	}
    	
    	if(ConfigProps.CREDITLIMIT.equals("N")){
    		Load.resourcePoolAvailableLimit.setVisible(false);
    	}else if(ConfigProps.OVERLAY.equals("G")){
    		Load.resourcePoolAvailableLimit.setEnabled(false);
    		Load.resourcePoolAvailableLimit.setToolTipText("Credit Limit has been disabled for the current scenario");
    		Load.resourcePoolAvailableLimit.setBackground(Color.GRAY);
    	}
    	
    	
    	if(ConfigProps.STATUS.equals("N")){
    		Load.statusButton.setVisible(false);
    	}else if(ConfigProps.STATUS.equals("G")){
    		Load.statusButton.setEnabled(false);
    		Load.statusButton.setToolTipText("Status feature has been disabled for the current scenario");
    		Load.statusButton.setBackground(Color.GRAY);
    	}
    	
    	
    	if(ConfigProps.OVERLAY.equals("N")){
    		Load.FlightPathButton.setVisible(false);
    	}else if(ConfigProps.OVERLAY.equals("G")){
    		Load.FlightPathButton.setEnabled(false);
    		Load.FlightPathButton.setToolTipText("Overlay feature has been disabled for the current scenario");
    		Load.FlightPathButton.setBackground(Color.GRAY);
    	}
    	
    	if(ConfigProps.RED_TO_BLUE_SWITCH.equals("N") || ConfigProps.RED_TO_BLUE_SWITCH.equals("G") ){
    		Load.redArrowabel.setVisible(false);
    	}
    	
    	if(ConfigProps.BLUE_TO_RED_SWITCH.equals("N") || ConfigProps.BLUE_TO_RED_SWITCH.equals("G")){
    		Load.blueArrowLabel.setVisible(false);
    	}
    	
    	if(ConfigProps.COHESION_SLIDER.equals("N") || ConfigProps.COHESION_SLIDER.equals("G")){
    		Load.cohesionSlider.setVisible(false);
    		Load.groupCohComboBox.setVisible(false);
    		Load.chohesionTitleLabel.setVisible(false);
    	}
    	
    	if(ConfigProps.PROXIMITY_SLIDER.equals("N") || ConfigProps.PROXIMITY_SLIDER.equals("G")){
    		Load.proximitySlider.setVisible(false);
    		Load.proximityTitleLabel.setVisible(false);
    		Load.groupProxComboBox.setVisible(false);
    	}
    	if(ConfigProps.VIEW_TARGET.equals("N")){
    		Load.statusViewLabel.setVisible(false);
    	}
    	
    	if(ConfigProps.RED_GROUP.equals("N") || ConfigProps.PROXIMITY_SLIDER.equals("G")){
    		Load.redGroupButton.setVisible(false);
    		Load.redAutoModeButton.setVisible(false);
    		Load.redSeekModeButton.setVisible(false);
    		Load.redTrackModeButton.setVisible(false);
    	}
    	
    	if(ConfigProps.BLUE_GROUP.equals("N") || ConfigProps.BLUE_GROUP.equals("G")){
    		Load.blueGroupButton.setVisible(false);
    		Load.blueAutoModeButton.setVisible(false);
    		Load.blueSeekModeButton.setVisible(false);
    		Load.blueTrackModeButton.setVisible(false);
    	}
    	
    	/*PointerInfo a = MouseInfo.getPointerInfo();
		Point b = a.getLocation();
		int mousePositionX = (int) b.getX();
		int mousePositionY = (int) b.getY();
		
		
    	Point p = Load.playSTopLable.getLocationOnScreen();
        Robot r = null;
		try {
			r = new Robot();
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        r.mouseMove(p.x,p.y);
        r.mousePress(InputEvent.BUTTON1_MASK);
        try { Thread.sleep(200); } catch (Exception e) {}
        r.mouseRelease(InputEvent.BUTTON1_MASK);
        
        r.mouseMove(mousePositionX,mousePositionY);*/
    	
    	Load.playSTopLable.setVisible(false);
        
        
	}

	private void startUpTimerSeconds(final int seconds) {
    	

    	int delay = 1000;
        int period = 1000;
        Sea.timer = new java.util.Timer("GameTimer");
        Sea.timer.scheduleAtFixedRate(new TimerTask() {

    	        public void run() {
    	        	setInterval(seconds);
    	        	Sea.TargetDetectTitleLabel.setText("Time: " + Sea.interval +"");
    	        	if(Sea.isCompleted){
    	        		JOptionPane.showMessageDialog(null, "Time Limit Over.\nPlease Click OK to Exit from the Game");
    	        		Sea.isCompleted=false;
    	            	System.exit(0);
    	        	}
    	        	
    	        	}
    	    }, delay, period);
		
	
    }

    private void startUpTimerMinutes(final int seconds) {
    	int delay = 1000;
        int period = 1000;
        Sea.timer = new java.util.Timer();
        Sea.timer.scheduleAtFixedRate(new TimerTask() {

    	        public void run() {
    	        	setInterval(seconds);
    	        	if(Sea.interval%60==0){
    	        		int min = Sea.interval/60;
    	        		Sea.TargetDetectTitleLabel.setText("Time Elapsed: " + min + " min " + "0" + " sec");
    	        	} else{
    	        		
    	        		int min = Sea.interval/60;
    	        		if(min>0){
    	        			int sec = Sea.interval - (min*60);
    	        			Sea.TargetDetectTitleLabel.setText("Time Elapsed: " + min + " min " + sec +  " sec");
    	        		}else{
    	        			Sea.TargetDetectTitleLabel.setText("Time Elapsed: 0 min " + Sea.interval + " sec");
    	        		}
    	        		
    	        	}
    	        	if(Sea.isCompleted){
    	        		JOptionPane.showMessageDialog(null, "Time Limit Over.\nPlease Click OK to Exit from the Game");
    	        		Sea.isCompleted=false;
    	            	System.exit(0);
    	        	}
    	        	
    	        	}
    	    }, delay, period);
		
	}
        
    
    
    private static final int setInterval(int limit) {
    	
    	//System.out.println("sea interval upwards "+Sea.interval +"  and limit "+limit);

        if (Sea.interval == limit){
        	Sea.timer.cancel();
        	Sea.isCompleted=true;
        	
        }
        Sea.interval = Sea.interval +1;
        return Sea.interval;
    }
    
private void startDownTimerSeconds(final int seconds) {
    	
	//final int timeValue = 0;
    	int delay = 1000;
        int period = 1000;
        Sea.timer = new java.util.Timer("GameTimer");
        Sea.interval = seconds;
        Sea.timer.scheduleAtFixedRate(new TimerTask() {

    	        public void run() {
    	        	 setIntervalDownwards(seconds);
    	        	Sea.TargetDetectTitleLabel.setText("Time: " + Sea.interval +"");
    	        	if(Sea.isCompleted){
    	        		JOptionPane.showMessageDialog(null, "Time Limit Over.\nPlease Click OK to Exit from the Game");
    	        		Sea.isCompleted=false;
    	            	System.exit(0);
    	        	}
    	        	
    	        	}
    	    }, delay, period);
		
	
    }

    private void startDownTimerMinutes(final int seconds) {
    	int delay = 1000;
        int period = 1000;
        Sea.timer = new java.util.Timer();
        Sea.interval = seconds;
        Sea.timer.scheduleAtFixedRate(new TimerTask() {

    	        public void run() {
    	        	setIntervalDownwards(seconds);
    	        	if(Sea.interval%60==0){
    	        		int min = Sea.interval/60;
    	        		Sea.TargetDetectTitleLabel.setText("Time Remaining: " + min + " min " + "0" + " sec");
    	        	} else{
    	        		
    	        		int min = Sea.interval/60;
    	        		if(min>0){
    	        			int sec = Sea.interval - (min*60);
    	        			Sea.TargetDetectTitleLabel.setText("Time Remaining: " + min + " min " + sec +  " sec");
    	        		}else{
    	        			Sea.TargetDetectTitleLabel.setText("Time Remaining: 0 min " + Sea.interval + " sec");
    	        		}
    	        		
    	        	}
    	        	if(Sea.isCompleted){
    	        		JOptionPane.showMessageDialog(null, "Time Limit Over.\nPlease Click OK to Exit from the Game");
    	        		Sea.isCompleted=false;
    	            	System.exit(0);
    	        	}
    	        	
    	        	}
    	    }, delay, period);
		
	}
        
    
    
    private static final int setIntervalDownwards(int limit) {
    //	System.out.println("sea interval"+Sea.interval +"  and limit "+limit);
        if (Sea.interval == 1){
        	Sea.timer.cancel();
        	Sea.isCompleted=true;
        	
        }
        
        Sea.interval = Sea.interval-1 ;
        return Sea.interval;
    }

	/**
     * @param args the command line arguments
     */
    
    public void readListFile(){
    	
    	String line = null;
    	ArrayList<String> list = new ArrayList<String>();

        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = new FileReader(scenarioPath + "List.txt");

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            
            
            while((line = bufferedReader.readLine()) != null) {
                //System.out.println(line);
                list.add(line);
              
            }	

            // Always close files.
            bufferedReader.close();			
        }
        catch(FileNotFoundException ex) {
            System.out.println(
                "Unable to open file '" + 
                "List.txt" + "'");				
        }
        catch(IOException ex) {
            System.out.println(
                "Error reading file '" 
                + "List.txt" + "'");					
            // Or we could just do this: 
            // ex.printStackTrace();
        }
    	
        scenarioNmaes = new String[list.size()];
        scenarioNmaes = list.toArray(scenarioNmaes);
        scenarioList.setModel(new javax.swing.DefaultComboBoxModel(scenarioNmaes));
    }
    public static void main(String args[]) {
        
    	
        AdminMain m = new AdminMain();
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    
    String [] scenarioNmaes = new String[20];
    String[] s;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton scenarioButton;
    private javax.swing.JLabel scenarioLabel;
    private javax.swing.JList scenarioList;
    private javax.swing.JButton startButton;
    public static String  scenarioPath = JarPath.getClassPath() +"scenarios//";
    public static String scenarioName="";
    // End of variables declaration//GEN-END:variables
    
}
