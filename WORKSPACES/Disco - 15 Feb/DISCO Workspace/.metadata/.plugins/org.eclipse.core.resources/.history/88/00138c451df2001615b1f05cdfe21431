import java.awt.Point;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;


public class ReLocation implements Movable {
	
	Load load;
    UnitsController controller;
    Unit unit;
    Point center;
    
    Boolean run = true;
   // String currentGroup = "";
    //Timer timer;
    int numpoints;                  // unit data.
    Point[] points = null;
    int numNeighbors = 1;               // Each unit observes some of its neighbors.

    //int leader = 0;                     // The current leader.
    //double direction = Math.PI/ 4;   // Current direction for leader.
    //double leaderChangeProb = 0.0;     // The probability that we'll change the leader.

    double randomMoveProb = 0;        // Sometimes, a unit moves in a random direction. // last updated
    int numMoveAttempts = 20;            // Move attempts before giving up. // last updated

    int[] maxStepSize ;               // Distance moved each step.
    int minDistSquare = 1;      
    //int radius = 10;                    // Drawing parameters.

   
  ReLocation(Load load){
	  this.load = load;
  }
    
   public void stop(){
     	run = false;
     }
      
   void loadUnit (Unit unit)
     {
 	
	   // Pick random locations.
     	numpoints = 2;
        points = new Point [numpoints];
        maxStepSize = new int[numpoints];
         
        // get the offset location 
        points[0] = new Point (center.x, center.y);
        maxStepSize[0] = 1;
         
         // updated
  }



   @Override
	public void move(Unit unit,  UnitsController controller, Point center) {
	   
	   this.unit = unit;
	   this.controller = controller;
	   this.center = center;
	   loadUnit(unit);
	   run = true;
	   controller.setReLocating(true);
	   
	   
	  
	   double tempDetectionRadius = unit.detectionRadius;
	   
	  
	   
	   
	   unit.detectionRadius = unit.relocationDetectRadius;
	   
	     
	   
	   
	   int futurePositionX = unit.positionX;
	   int futurePositionY = unit.positionY;
	   
	   
	   while (run) {
		     
		      // unit.flyTowardsCenterOfMass(controller.list);
		     //load.keepUnitDistance(controller.list,controller.group);
		   
		   points[1] = new Point (futurePositionX,futurePositionY);
	 	   maxStepSize[1] = 5 * unit.speed;
	 	   
	 	  int initialPositionX = futurePositionX;
		   int initialPositionY = futurePositionY;
		   
             
		   nextStep ();
		   
		//   System.out.println("Unit Detect Radius while relocating " + unit.detectionRadius);
             
             //unit.flyTowardsCenterOfMass(controller.list);
             //load.keepUnitDistance(controller.list,controller.group);
		   
		   futurePositionX= points[1].x;
		   futurePositionY=points[1].y;
		   
		   //Hard Code
		   
		  // futurePositionX = 600;
		//   futurePositionY = 600;
		   
		   
		   if((futurePositionX-initialPositionX)>4){
			   futurePositionX = (int) (initialPositionX+unit.relocationSpeed*4);
		   }
		   if((initialPositionX-futurePositionX)>4){
			   futurePositionX = (int) (initialPositionX-unit.relocationSpeed*4);
		   }
		   
		   
		   if((futurePositionY-initialPositionY)>4){
			   futurePositionY = (int) (initialPositionY+unit.relocationSpeed*4);
		   }
		   if((initialPositionY-futurePositionY)>5){
			   futurePositionY = (int) (initialPositionY-unit.relocationSpeed*4);
		   }
		   
		   
		  /* if((futurePositionX-initialPositionX) < 5){
			   System.out.println("Proper X Movement"  + " for " + unit.id);
		   }else{
			   System.out.println("Abnormal X Movement"+ " for " + unit.id);
		   }
		   */
		  /* if(Math.abs(futurePositionY-initialPositionY) < 5){
			   System.out.println("Proper Y Movement");
		   }else{
			   System.out.println("Abnormal Y Movement");
		   }*/
		   
		   unit.positionX = futurePositionX;
    		 unit.positionY = futurePositionY;
      		//System.out.println("Unit " + unit.id + " Final PositionX: " + unit.positionX + " Final PositionY: " + unit.positionY);
      		 
      	/*	if (false) {
        		//for (Unit u: controller.list) 
                	unit.flyTowardsCenterOfMass(controller.list);
        	       	load.keep.groupDistance(controller);

        	} */
      		 //unit.flyTowardsCenterOfMass(controller.list);
      		 //load.keepUnitDistance(controller.list, controller.group);
      		  
      		  
             
             centerArea(unit,tempDetectionRadius);
             
            try {
                 Thread.sleep (1000);
             }
             catch (InterruptedException e) {
                 break;
             }

             
            load.render ();
             
         } // keep looping to move units and targets
     
     }
     

   void centerArea(Unit unit,double tempDetectionRadius){
	   
	
	int dis = (int) ((controller.searchRadius * Constants.SEARCH_RADIUS) +
			   Constants.SEARCH_RADIUS);
	
	
	if (controller.isTracking){
	
		 this.stop();
		controller.setReLocating(false);
	}
	else if ( Math.sqrt( center.distanceSq( controller.center() ) ) < (dis/2) ) {
		
		//if (load.stop)
		  this.stop();
		  
		  unit.detectionRadius = tempDetectionRadius;
		  
		  
		  if(unit.colorID==1){
			    if(Load.activityFeed.getUnitRelocateComplete().equals("Y"))
				Sea.updatesTextArea.append("Unit Relocation Complete - Blue Units has been relocated successfully and it is seeking now" + "\n\n");
			}else{
				if(Load.activityFeed.getUnitRelocateComplete().equals("Y"))
				Sea.updatesTextArea.append("Unit Relocation Complete - Red Units  has been relocated successfully and it is seeking now" + "\n\n");
			}
			
		  
		  
		  if (controller.isReLocating)
		       controller.setReLocating(false);
		  
		  if (!controller.isSeeking)
		      controller.seekButton_clicked();
		    
	}	
   
   }
     
     
   void nextStep ()
     {
         // First, compute the new locations, then copy them into points[] array.
 	Point[] newLocations = new Point [numpoints];

 	    // Except for the leader, move the others towards neighbors.
 	for (int i=0; i<numpoints; i++) {
 	    if (i == 0) {
                 // Apply different rules for leader.
             newLocations[0] = moveLeader ();
 	    }
             else {
             	 
                 newLocations[i] = crossBorder(moveOther (i));
                                  
             }
         }
         
         
 	     // Synchronous update for all.
         for (int i=0; i<numpoints; i++) {
             points[i] = newLocations[i];
         }
     }

     
     Point crossBorder (Point point){
     	
     	if (point.y > Constants.lBORDER-10) {
     		
     		return new Point (point.x,400); // it smaller than the lBORDER = 440
     	
     	} else if (point.y < 2) {
     		
     		return new Point (point.x,1);
     		
     	} else if (point.x > Constants.xBORDER) {
     		
     		return new Point (Constants.xBORDER-2,point.y);
     	
     	} else if (point.x < 0) {
     		
     		return new Point (2,point.y);
     		
     	}	
     	
     	return new Point (point.x,point.y);
     }

     
     Point moveLeader () {
 	 	
    	 return new Point (center.x,center.y);
     }
     

     Point moveOther (int i)
     {
         // Identify nearest neighbors.
         int[] neighbors = findNearestNeighbors (i);
         
         // Compute centroid.
         Point centroid = computeCentroid (neighbors);
         
       //  if (RandTool.uniform() < randomMoveProb) {
         if(false){
             // Random move: pick a random direction.
             return randomMove (i);
         }
         else {
             // Apply rules.
             return applyRules (i, neighbors, centroid);
         }
                
     } 


     Point computeCentroid (int[] neighbors)
     {
         int sumX = 0, sumY = 0;
         for (int k=0; k<numNeighbors; k++) {
             sumX += points[neighbors[k]].x;
             sumY += points[neighbors[k]].y;
         }
         int centX = (int) ( (double) sumX / (double) numNeighbors);
         int centY = (int) ( (double) sumY / (double) numNeighbors);
         
         
         return new Point (centX, centY);
     }
     

     Point randomMove (int i)
     {
         double theta = RandTool.uniform (0.0, 2.0*Math.PI);
         int x = (int) (points[i].x + maxStepSize[i] * Math.cos (theta));
         int y = (int) (points[i].y + maxStepSize[i] * Math.sin (theta));
         return new Point (x,y);
     }


     Point applyRules (int i, int[] neighbors, Point centroid)
     {
         double centDist = Math.sqrt (distance (points[i].x, points[i].y, centroid.x, centroid.y));
         double maxAlpha = 1.0;
         
         int initialXPos = points[i].x;
         int initialYPos = points[i].y;
         
         if (centDist < (double) maxStepSize[i]) {
             maxAlpha = 1.0;
         }
         else {
             maxAlpha = (double) maxStepSize[i] / centDist;
         }
         
         boolean succ = false;
         double alpha = maxAlpha;
         int x=0,y=0;
         
         for (int m=0; m<numMoveAttempts; m++) {
             // Compute new x,y.
             int tempX = (int) (points[i].x + alpha * (centroid.x - points[i].x));
             int tempY = (int) (points[i].y + alpha * (centroid.y - points[i].y));
             int setDist = setDistance (tempX, tempY, neighbors);
             if (setDist > minDistSquare) {
                 // Valid.
                 x = tempX;
                 y = tempY;
                 succ = true;
                 break;
             }
             // Otherwise, try a smaller move.
             alpha = alpha / 2.0;
         }
         
         // If not successful, try moving away from centroid.
         alpha = maxAlpha;
         if (!succ) {
             x = (int) (points[i].x - alpha * (centroid.x - points[i].x));
             y = (int) (points[i].y - alpha * (centroid.y - points[i].y));
         }


         
         return new Point (x,y);
     }

     
     int[] findNearestNeighbors (int i)
     {
 	int[] neighbors = new int [numNeighbors];
 	int current = i;
 	for (int k=0; k<numNeighbors; k++) {
 	    current = nextpoint (current);
 	    neighbors[k] = current;
 	}
 	return neighbors;
     }


     int nextpoint (int i) 
     {
 	if (i < numpoints-1) {
 	    return i+1;
 	}
 	else {
 	    return 0;
 	}
     }


     int distance (int x1, int y1, int x2, int y2) 
     {
 	return ( (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) );
     }


     int setDistance (int x, int y, int[] neighbors) 
     {
 	// Distance to closest neighbor.
 	Point p = points[neighbors[0]];
 	int min = distance (x, y, p.x, p.y);
 	for (int k=1; k<numNeighbors; k++) {
 	    p = points[neighbors[k]];
 	    int d = distance (x,y, p.x, p.y);
 	    if (d < min) {
 		min = d;
 	    }
 	}
 	return min;
     }

    
    
    // These Methods Are not Are not implement methods
	@Override
	public void move(Target target) {
		// TODO Auto-generated method stub
		
	}

	
	
	

}
